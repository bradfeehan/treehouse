---
description: Describes available tools (Tidewave)
globs:
alwaysApply: true
---

## Tool Use

There are a few tools available that can be invoked as necessary. Our work may involve significant numbers of repetitive and similar tool calls, or it could involve a wide variety of different tool calls, depending on the job we are tasked with.
Don't be afraid to use them anytime: there's no additional costs or risks involved, and this is how we get work done.
By using these tools, you can act autonomously to gather information before making decisions, to inform the choice.
If you get too many errors or failures with tool calls, and have tried a few workarounds, stop and ask the user.
Even if in agent mode and trying to get a job done autonomously -- if the tools are failing, we should get advice.
The following is just what is provided by this codebase in particular. Other tools may be provided by the particular users' environment.

### Tidewave

Tidewave lets you interact directly with the running Phoenix app.

- `get_logs` retrieves recent logs from the running server
- `get_source_location` determines which file a module or function lives in
- `get_package_location` determines where a dependency package lives on disk
- `project_eval` allows evaluating Elixir code in the server, including `h` helper
- `execute_sql_query` allows running arbitrary SQL queries against the database
- `get_ecto_schemas` reports on the database schema as seen by Ecto in the server
- `list_liveview_pages` lists all currently connected Phoenix LiveViews

There's also tools to search for documentation:

- `get_docs` shows help text for modules and functions, including for dependencies
- `search_package_docs` searches Hex documentation for packages in dependencies
